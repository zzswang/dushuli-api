openapi: "3.0.0"
info:
  version: 1.0.0
  title: Dushuli
  description: "读书历CRUD服务"
  license:
    name: MIT
servers:
  - url: https://api.36node.com{basePath}
    description: The production API server
    variables:
      basePath:
        default: /dushuli/v0
paths:
  /wechat/payment:
    post:
      summary: initiate a payment process
      operationId: createPayment
      tags:
        - wechat
      requestBody:
        description: payment info
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePaymentBody"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePaymentResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /wechat/signature:
    get:
      summary: get wechat js sdk signature
      operationId: getSignature
      tags:
        - wechat
      parameters:
        - name: url
          in: query
          description: 调用 jssdk 的网页链接
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignatureResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
    
  /members:
    get:
      summary: list all members
      operationId: listMembers
      tags:
        - member
      parameters:
        - name: _select
          in: query
          description: select which fields from db
          required: false
          schema:
            type: string
        - name: _limit
          in: query
          description: how many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: _offset
          in: query
          description: How many items will be skip
          required: false
          schema:
            type: string
        - name: _sort
          in: query
          description: specifies which document fields to sort
          required: false
          schema:
            type: string
        - name: users
          in: query
          required: false
          schema:
            type: string
        - name: active
          in: query
          required: false
          schema: 
            type: boolean
      responses:
        "200":
          description: a paged array of members
          headers:
            X-Total-Count:
              description: total count of all members match the query
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Member"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
    
    post:
      summary: create a member
      operationId: createMember
      tags:
        - member
      requestBody:
        description: member to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Member" 
      responses:
        "201":
          description: the member created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
          
  /members/{user}:
    get:
      summary: get member by user
      operationId: getMember
      tags:
        - member
      parameters:
        - name: user
          in: path
          required: true
          description: the user of the member to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
        
    delete:
      summary: delete a member
      operationId: deleteMember
      tags:
        - member
      parameters:
        - name: user
          in: path
          description: the user of the member to be deleted
          required: true
          schema:
            type: string
      responses:
        "204":
          description: member deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    put:
      summary: update a member
      operationId: updateMember
      tags:
        - member
      parameters:
        - name: user
          in: path
          description: the user of the member to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: member to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Member"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"    

  /products:
    get:
      summary: list all products
      operationId: listProducts
      tags:
        - product
      parameters:
        - name: _select
          in: query
          description: select which fields from db
          required: false
          schema:
            type: string
        - name: _limit
          in: query
          description: how many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: _offset
          in: query
          description: How many items will be skip
          required: false
          schema:
            type: string
        - name: _sort
          in: query
          description: specifies which document fields to sort
          required: false
          schema:
            type: string
        - name: published
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: a paged array of products
          headers:
            X-Total-Count:
              description: total count of all products match the query
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
    
    post:
      summary: create a product
      operationId: createProduct
      tags:
        - product
      requestBody:
        description: product to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product" 
      responses:
        "201":
          description: the product created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
          
  /products/{productId}:
    get:
      summary: get product by productId
      operationId: getProduct
      tags:
        - product
      parameters:
        - name: productId
          in: path
          required: true
          description: the productId of the product to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
        
    delete:
      summary: delete a product
      operationId: deleteProduct
      tags:
        - product
      parameters:
        - name: productId
          in: path
          description: the productId of the product to be deleted
          required: true
          schema:
            type: string
      responses:
        "204":
          description: product deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    put:
      summary: update product
      operationId: updateProduct
      tags:
        - product
      parameters:
        - name: productId
          in: path
          description: the user of the product to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: product to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"    

  /orders:
    get:
      summary: list all orders
      operationId: listOrders
      tags:
        - order
      parameters:
        - name: _select
          in: query
          description: select which fields from db
          required: false
          schema:
            type: string
        - name: _limit
          in: query
          description: how many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: _offset
          in: query
          description: How many items will be skip
          required: false
          schema:
            type: string
        - name: _sort
          in: query
          description: specifies which document fields to sort
          required: false
          schema:
            type: string
        - name: _populate
          in: query
          description: populate ref, 如果有多个 用空格分开
          required: false
          schema:
            type: string
          example: product
        - name: paid
          in: query
          required: false
          schema:
            type: boolean
        - name: method
          in: query
          required: false
          schema:
            type: string
        - name: createdBy
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: a paged array of orders
          headers:
            X-Total-Count:
              description: total count of all orders match the query
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
    
    post:
      summary: create a order
      operationId: createOrder
      tags:
        - order
      requestBody:
        description: order to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order" 
      responses:
        "201":
          description: the order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
          
  /orders/{orderId}:
    get:
      summary: get order by orderId
      operationId: getOrder
      tags:
        - order
      parameters:
        - name: orderId
          in: path
          required: true
          description: the orderId of the order to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
        
    delete:
      summary: delete a order
      operationId: deleteOrder
      tags:
        - order
      parameters:
        - name: orderId
          in: path
          description: the orderId of the order to be deleted
          required: true
          schema:
            type: string
      responses:
        "204":
          description: order deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    put:
      summary: update order
      operationId: updateOrder
      tags:
        - order
      parameters:
        - name: orderId
          in: path
          description: the user of the order to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: order to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /settings/{user}:
    get:
      summary: get setting by user
      operationId: getSetting
      tags:
        - setting
      parameters:
        - name: user
          in: path
          required: true
          description: the user of the setting to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Setting"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
        
    delete:
      summary: delete a setting
      operationId: deleteSetting
      tags:
        - setting
      parameters:
        - name: user
          in: path
          description: the user of the setting to be deleted
          required: true
          schema:
            type: string
      responses:
        "204":
          description: setting deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    put:
      summary: update a setting
      operationId: updateSetting
      tags:
        - setting
      parameters:
        - name: user
          in: path
          description: the user of the setting to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: setting to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Setting"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Setting"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"    
    
  /stats:
    post:
      summary: create or update stats
      operationId: createStats
      tags:
        - stats
      requestBody:
        description: stats body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stats"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stats"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    get:
      summary: list stats
      operationId: listStats
      tags:
        - stats
      parameters:
        - name: _select
          in: query
          description: select which fields from db
          required: false
          schema:
            type: string
        - name: _limit
          in: query
          description: how many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: _offset
          in: query
          description: How many items will be skip
          required: false
          schema:
            type: string
        - name: _sort
          in: query
          description: specifies which document fields to sort
          required: false
          schema:
            type: string
        - name: user
          in: query
          required: true
          schema:
            type: string
        - name: date_gt
          in: query
          required: false
          schema: 
            type: string
            format: date-time
        - name: date_lt
          in: query
          required: false
          schema: 
            type: string
            format: date-time
      responses:
        "200":
          description: a paged array of members
          headers:
            X-Total-Count:
              description: total count of all members match the query
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Member"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /invitations:
    post:
      summary: Create invitation 可以用于发送邀请码
      operationId: createInvitation
      tags:
        - invitation
      requestBody:
        description: Body for creating invitation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInvitationBody"
      responses:
        "201":
          description: The invitaion created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

    get:
      summary: List invitations
      operationId: listInvitations
      tags:
        - invitation
      parameters:
        - name: _limit
          in: query
          description: How many items to return at one time
          required: false
          schema:
            type: integer
            format: int32
        - name: _offset
          in: query
          description: How many items will be skip
          required: false
          schema:
            type: string
        - name: ns
          in: query
          description: Which namespace invitations blong to
          required: false
          schema:
            type: string
        - name: sub
          in: query
          description: eg. ACTIVE
          required: false
          schema:
            type: string
        - name: code
          in: query
          description: Code
          required: false
          schema:
            type: string
        - name: code_like
          in: query
          description: Code 正则查询
          required: false
          schema:
            type: string
        - name: phone
          in: query
          description: 手机号
          required: false
          schema:
            type: string
        - name: used
          in: query
          description: 是否已经使用
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A paged array of invitations
          headers:
            X-Total-Count:
              description: Total count of all documents match the query
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

    put:
      summary: bulk upsert invitations
      operationId: updateInvitations
      tags:
        - invitation
      requestBody:
        description: Invitations to be upserted
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateInvitationsBody"
      responses:
        "200":
          description: The invitations be uperted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /invitations/{invitationId}:
    get:
      summary: Get invitation by id
      operationId: getInvitation
      tags:
        - invitation
      parameters:
        - name: invitationId
          in: path
          required: true
          description: The id of invitation
          schema:
            type: string
      responses:
        "200":
          description: The invitation with given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    put:
      summary: Update invitation
      operationId: updateInvitation
      tags:
        - invitation
      parameters:
        - name: invitationId
          in: path
          required: true
          description: The id of invitation
          schema:
            type: string
      requestBody:
        description: Invitation to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInvitationBody"
      responses:
        "200":
          description: The invitation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    delete:
      summary: delete invitation
      operationId: deleteInvitation
      tags:
        - invitation
      parameters:
        - name: invitationId
          in: path
          required: true
          description: The id of invitation
          schema:
            type: string
      responses:
        "204":
          description: invitation deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"





security:
  - bearerAuth: []

components:
  responses:
    NoContent:
      description: The resource was deleted successfully.
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"
    InternalError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"
  schemas:
      
    StatsData:
      type: object
      properties:
        value:
          type: number
          description: 音频播放进度

    Stats:
      type: object
      required:
        - user
      properties:
        id:
          type: string
          description: id
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
        user:
          type: string
          description: 用户 id
        date:
          type: string
          description: 阅读统计的日期
        data:
          $ref: "#/components/schemas/StatsData"
          description: 数据对象

    CreatePaymentBody:
      type: object
      required:
        - openid
      properties:
        openid:
          type: string
          description: 付款用户的openid
        product:
          type: string
          description: 产品
        user:
          type: object
          description: 用户
    
    CreatePaymentResponse:
      type: object
      properties:
        appid:
          type: string
          description: 公众号 appid
          example: "wx8888888888888888"
        timeStamp: 
          type: string
          description: 时间戳
          example: "1414561699"
        nonceStr:
          type: string
          description: 随机字符串
          example: "5K8264ILTKCH16CQ2502SI8ZNMTM67VS"
        package:
          type: string
          description: 订单详情扩展字符串
          example: "prepay_id=123456789"
        signType:
          type: string
          description: 签名方式
          example: "MD5"
        paySign:
          type: string
          description: 签名
          example: "C380BEC2BFD727A4B6845133519F3AD6"

    GetSignatureResponse:
      type: object
      properties:
        debug:
          type: boolean
        appId:
          type: string
          description: 公众号 appid
          example: "wx8888888888888888"
        timestamp:
          type: string
          description: 时间戳
          example: "1414561699"
        nonceStr:
          type: string
          description: 随机字符串
          example: "5K8264ILTKCH16CQ2502SI8ZNMTM67VS"
        signature:
          type: string
          description: 签名
          example: "5bfc8633f9c2127508296408c64f99068ad9dcb5"
        jsApiList:
          type: array
          items:
            type: string
          description: js api 列表
          example: [
            "checkJsApi",
            "onMenuShareTimeline",
            "onMenuShareAppMessage",
            "onMenuShareQQ",
            "onMenuShareWeibo",
            "onMenuShareQZone",
            "chooseImage",
            "previewImage",
            "uploadImage",
            "startRecord",
            "stopRecord",
            "onVoiceRecordEnd",
            "playVoice",
            "pauseVoice",
            "stopVoice",
            "onVoicePlayEnd",
            "uploadVoice",
            "downloadVoice",
            "translateVoice",
            "getNetworkType",
            "openLocation",
            "getLocation",
            "startSearchBeacons",
            "stopSearchBeacons",
            "onSearchBeacons",
            "closeWindow",
            "hideMenuItems",
            "showMenuItems",
            "hideAllNonBaseMenuItem",
            "showAllNonBaseMenuItem",
            "scanQRCode",
            "openProductSpecificView",
            "chooseCard",
            "addCard",
            "openCard",
            "chooseWXPay"
          ]
      
    Period:
      type: object
      properties:
        start: 
          type: string
          format: date-time
          description: 有效期起始时间
        end:
          type: string
          format: date-time
          description: 有效期结束时间
        trial:
          type: boolean
          description: 是否是试用
        product:
          type: string
          description: 商品 id
        active: 
          type: string
          description: 是否有效
    
    Member:
      type: object
      required:
        - user
      properties:
        id:
          type: string
          description: id
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
        user:
          type: string
          description: 用户id
        period:
          type: array
          items:
            $ref: "#/components/schemas/Period"
        active:
          type: boolean
          description: 是否激活

    Order:
      type: object
      properties:
        id:
          type: string
          description: id
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
        no:
          type: string
          description: 订单号
        product:
          type: string
          description: 商品 id
        method:
          type: string
          description: 支付方式
        paidAt:
          type: string
          format: date-time
          description: 付款时间
        data:
          type: object
          description: 支付回调数据
        user:
          type: object
          description: 用户
        status:
          type: string
          description: 订单状态
        comment:
          type: string
          description: 备注
        fee:
          type: number
          description: 支付金额
        createdBy:
          type: string
          description: 购买的用户 id

    PriceItem:
      type: object
      properties:
        purchaseStart:
          type: string
          format: date-time
          description: 购买时间段的起始时间
        purchaseEnd:
          type: string
          format: date-time
          description: 购买时间段的结束时间
        period: 
          type: number
          description: 延长有效期（毫秒）
        start: 
          type: date
          format: date-time
          description: 有效期的起始时间
        end:
          type: date
          format: date-time
          description: 有效期的结素时间
        price: 
          type: number
          description: 价格

    Product:
      type: object
      properties:
        id:
          type: string
          description: id
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
        slug:
          type: string
          description: slug
        price:
          type: number
          description: 当前时间的现价
        priceItems:
          type: array
          items:
            $ref: "#/components/schemas/PriceItem"
          description: 价格行项目
        originalPrice:
          type: number
          description: 原价
        name:
          type: string
          description: 商品名称
        description:
          type: string
          description: 商品描述
        start:
          type: string
          format: date-time
          description: 当前时间的有效期起始时间
        end:
          type: string
          format: date-time
          description: 当前时间的有效期结束时间
        period:
          type: number
          description: 当前时间的延长有效期（毫秒）
        published:
          type: boolean
          description: 是否发布
        publishedAt:
          type: string
          format: date-time
          description: 发布时间
    
    Setting:
      type: object
      properties:
        user:
          type: string
        birthday:
          type: string
        alarm:
          type: string
    
    Invitation:
      description: 邀请函，例如用于获得邀请码，邮箱或者手机授权码
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        code:
          type: string
          description: 只有 admin 能看到
        email:
          type: string
        phone:
          type: string
        expireAt:
          type: string
          format: date-time
          description: 邀请码过期时间
        period:
          type: integer
          description: 该邀请码生效后，发生作用的有效期, 例如激活码，代表激活用户的时长
        start:
          type: string
          format: date-time
          description: 有效时间的开始时间
        end:
          type: string
          format: date-time
          description: 有效时间的结束时间
        used:
          type: boolean
          description: 是否已经使用
        usedAt:
          type: string
          format: date-time
          description: 邀请码使用时间
        usedBy:
          type: string
          description: 使用邀请码的用户 id
        user:
          type: object
          description: 使用邀请码的用户对象
        source:
          type: string
          description: 渠道来源
        comment:
          type: string
          description: 备注

    UpdateInvitationBody:
      description: 创建邀请函所需参数
      type: object
      properties:
        start:
          type: string
          format: date-time
          description: 有效时间的开始时间
        end:
          type: string
          format: date-time
          description: 有效时间的结束时间
        period:
          type: integer
          description: 有效时长，指激活时刻开始一共拥有多少毫秒
        source:
          type: string
          description: 渠道来源
        comment:
          type: string
          description: 备注
        used:
          type: boolean
          description: 是否已经使用
        usedBy:
          type: string
          description: 使用邀请码的用户 id
        user:
          type: object
          description: 使用邀请码的用户对象
        email:
          type: string
        phone:
          type: string

    UpdateInvitationsBody:
      description: 批量创建或修改邀请码所需参数
      type: object
      properties:
        id:
          type: string
          description: 需要修改的邀请码 Id
        code:
          type: string
          description: 需要创建或修改邀请码
        start:
          type: string
          format: date-time
          description: 有效时间的开始时间
        end:
          type: string
          format: date-time
          description: 有效时间的结束时间
        period:
          type: integer
          description: 有效时长，指激活时刻开始一共拥有多少毫秒

    CreateInvitationBody:
      description: 创建邀请函所需参数
      type: object
      properties:
        start:
          type: string
          format: date-time
          description: 有效时间的开始时间
        end:
          type: string
          format: date-time
          description: 有效时间的结束时间
        period:
          type: integer
          description: 有效时长，指激活时刻开始一共拥有多少毫秒
        email:
          type: string
        phone:
          type: string

    Err:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
