openapi: "3.0.0"
info:
  version: 1.0.0
  title: Dushuli
  description: "读书历CRUD服务"
  license:
    name: MIT
servers:
  - url: https://api.36node.com{basePath}
    description: The production API server
    variables:
      basePath:
        default: /dushuli/v0
paths:
  /books:
    get:
      summary: List all books
      operationId: listBooks
      tags:
        - books
      parameters:
        - name: _limit
          in: query
          description: How many items to return at one time
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: _sort
          in: query
          description: Sort Name
          required: false
          schema:
            type: string
            default: -updatedAt
        - name: date_gt
          in: query
          description: Return Books Date greater than given date, format YYYYMMDD
          example: "20190101"
          required: false
          schema:
            type: string
        - name: date_lt
          in: query
          description: Return Books Date less than given date, format YYYYMMDD
          example: "20190331"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A paged array of books
          headers:
            X-Total-Count:
              description: Total count of all categories match the query
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Books"
              examples:
                default:
                  value: |
                    [
                      {
                        "date": "2018-12-24",
                        "holiday": "春节1",
                        "solarTerm": "春分1",
                        "book": "一本书2",
                        "author": "作者2",
                        "summary": "一些summary123",
                        "content": "<p>dasdhadd3123<a>dasdad</a></p>",
                        "updatedAt": "2018-12-24T05:59:02.250Z",
                        "createdAt": "2018-12-24T05:59:02.250Z",
                        "id": "5c2075a6fe46ab69eec17de0"
                      },
                      {
                        "date": "2018-12-24",
                        "holiday": "春节2",
                        "solarTerm": "春分2",
                        "book": "一本书3",
                        "author": "作者3",
                        "summary": "一些summary1232344",
                        "content": "<p>dasdhadd3123<b>dasdad</b></p>",
                        "updatedAt": "2018-12-24T05:59:12.250Z",
                        "createdAt": "2018-12-24T05:59:12.250Z",
                        "id": "5c2075a6fe46ab69eec17de1"
                      }
                    ]
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

    post:
      summary: Create a book
      operationId: createBook
      tags:
        - books
      requestBody:
        description: book to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Books"
            examples:
              default:
                value: |
                  {
                    "date": "2018-12-24",
                    "holiday": "春节1",
                    "solarTerm": "春分1",
                    "book": "一本书2",
                    "author": "作者2",
                    "summary": "一些summary123",
                    "content": "<p>dasdhadd3123<b>dasdad</b></p>"
                  }
      responses:
        "201":
          description: The Book created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Books"
              examples:
                default:
                  value: |
                    {
                      "date": "2018-12-24",
                      "holiday": "春节1",
                      "solarTerm": "春分1",
                      "book": "一本书2",
                      "author": "作者2",
                      "summary": "一些summary123",
                      "content": "<p>dasdhadd3123<b>dasdad</b></p>",
                      "id": "5c2075a6fe46ab69eec17de1"
                    }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  /books/{bookIdOrSlug}:
    get:
      summary: Find book by id or slug
      operationId: showBookByIdOrSlug
      tags:
        - books
      parameters:
        - name: bookIdOrSlug
          in: path
          required: true
          description: The id or slug of the book to retrieve
          schema:
            type: string
        - name: identify
          in: query
          required: true
          description: The identify of id or slug
          schema:
            type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Books"
              examples:
                default:
                  value: |
                    {
                      "date": "2018-12-24",
                      "holiday": "春节1",
                      "solarTerm": "春分1",
                      "book": "一本书2",
                      "author": "作者2",
                      "summary": "一些summary123",
                      "content": "<p>dasdhadd3123<b>dasdad</b></p>",
                      "id": "5c2075a6fe46ab69eec17de1"
                    }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
    delete:
      description: deletes a single book based on the ID or slug supplied
      operationId: deleteBookByIdOrSlug
      tags:
        - books
      parameters:
        - name: bookIdOrSlug
          in: path
          required: true
          description: The id or slug of the book to retrieve
          schema:
            type: string
        - name: identify
          in: query
          required: true
          description: The identify of id or slug
          schema:
            type: string
      responses:
        "204":
          description: book deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
    put:
      description: update a single book based on the ID or slug supplied
      operationId: updateBookByIdOrSlug
      tags:
        - books
      parameters:
        - name: bookIdOrSlug
          in: path
          required: true
          description: The id or slug of the book to retrieve
          schema:
            type: string
        - name: identify
          in: query
          required: true
          description: The identify of id or slug
          schema:
            type: string
      requestBody:
        description: book to update to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Books"
            examples:
              default:
                value: |
                  {
                    "date": "2018-12-24",
                    "holiday": "春节1",
                    "solarTerm": "春分1",
                    "book": "一本书2",
                    "author": "作者2",
                    "summary": "一些summary123",
                    "content": "<p>dasdhadd3123<b>dasdad</b></p>"
                  }
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Books"
              examples:
                default:
                  value: |
                    {
                      "date": "2018-12-24",
                      "holiday": "春节1",
                      "solarTerm": "春分1",
                      "book": "一本书2",
                      "author": "作者2",
                      "summary": "一些summary123",
                      "content": "<p>dasdhadd3123<b>dasdad</b></p>",
                      "id": "5c2075a6fe46ab69eec17de1"
                    }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

security:
  - bearerAuth: []

components:
  responses:
    NoContent:
      description: The resource was deleted successfully.
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"
    InternalError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"
  schemas:
    Books:
      required:
        - date
      properties:
        date:
          type: string
          description: 日期对应的 slug，例如 20190101
        holiday:
          type: string
          description: 节日 以及标语
          example: 元旦 如沐春风
        solarTerm:
          type: string
          description: 节气 以及标语
          example: 谷雨 好时节
        slogan:
          type: string
          description: 口号之 每日宜
          example: 宜写代码
        book:
          type: string
          description: 书名
          example: 双城记
        author:
          type: string
          description: 作者
          example: 雅马哈
        summary:
          type: string
          description: 摘要
          example: 小楼一夜听春雨，深巷明朝卖杏花
        content:
          type: string
          description: 内容
        audio:
          type: string
          description: 音频的 url
    Err:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
